generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator prismaClassGenerator {
  provider               = "prisma-class-generator"
  dryRun                 = "false"
  separateRelationFields = "true"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Permission {
  id              Int              @id @default(autoincrement())
  action          String
  condition       Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  subjectId       Int?
  subject         Subject?         @relation(fields: [subjectId], references: [id])
  rolePermissions RolePermission[]

  @@unique([action, subjectId])
}

model Subject {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  permissions Permission[]
}

model RolePermission {
  id           Int         @id @default(autoincrement())
  roleId       Int?
  permissionId Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  permission   Permission? @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role?       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  rolePermissions RolePermission[]
  user            User[]
}

enum SocialProvider {
  FACEBOOK
  GOOGLE
  NONE
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  roleId    Int?
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  role      Role?    @relation(fields: [roleId], references: [id])

  isVerified         Boolean   @default(false)
  passwordResetToken String?   @unique
  passwordResetAt    DateTime?

  isSocialLogin  Boolean        @default(false)
  socialProvider SocialProvider @default(NONE)

  Rating Rating[]

  teacherCourses    Course[]            @relation("Instructors")
  coursesOnStudents CoursesOnStudents[]

  studentProfile     StudentProfile?
  teacherProfile     TeacherProfile?
  orders             Order[]
  wishlist           Wishlist?
  cart               Cart?
  paidTransactions   Transaction[]   @relation("paidBy")
  earnedTransactions Transaction[]   @relation("paidTo")
}

model CoursesOnStudents {
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  student    User     @relation(fields: [studentId], references: [id])
  studentId  Int
  assignedAt DateTime @default(now())

  progress   Progress @relation(fields: [progressId], references: [id])
  progressId Int

  achievement Achievement?

  @@id([courseId, studentId])
}

model Progress {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  completedLectures  Lecture[]
  progressPercentage Float
  coursesOnStudents  CoursesOnStudents[]
}

model Achievement {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  image                      String
  coursesOnStudents          CoursesOnStudents @relation(fields: [coursesOnStudentsCourseId, coursesOnStudentsStudentId], references: [courseId, studentId])
  coursesOnStudentsCourseId  Int
  coursesOnStudentsStudentId Int

  @@unique([coursesOnStudentsCourseId, coursesOnStudentsStudentId])
}

model StudentProfile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  image                String?
  dob                  DateTime?
  occupation           String?
  phone                String?
  institution          String?
  currentQualification String?
  highestQualification String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  isEmailUpdates Boolean @default(true)
}

model TeacherProfile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  image       String?
  title       String?
  biography   String?
  phoneNumber String?

  notifications Json?

  socialProfile SocialProfile?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique
}

enum TEACHER_NOTIFICATION_TYPE {
  WHO_BUY_COURSE
  WHO_WRITE_REVIEW
  WHO_COMMENT_COURSE
  WHO_REPLIED_COURSE
  DAILY_PROFILE_VISIT
  WHO_DOWNOAD_COURSE_ATTACHMENT
}

model SocialProfile {
  id Int @id @default(autoincrement())

  website   String?
  facebook  String?
  instagram String?
  linkedin  String?
  twitter   String?
  youtube   String?
  whatsapp  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  TeacherProfile   TeacherProfile @relation(fields: [teacherProfileId], references: [id])
  teacherProfileId Int            @unique
}

model Transaction {
  id     Int           @id @default(autoincrement())
  medium PaymentMedium @default(ESEWA)

  status Status  @default(COMPLETED)

  total    Int @default(0)
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int

  paidTo   User @relation("paidTo", fields: [paidToId], references: [id])
  paidToId Int

  paidBy   User @relation("paidBy", fields: [paidById], references: [id])
  paidById Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([courseId, paidById])
}

enum PaymentMedium {
  ESEWA
  KHALTI
  FONEPAY
}

enum Status {
  COMPLETED
  REQUESTED
}
model Rating {
  id      Int    @id @default(autoincrement())
  message String
  rate    Int    @default(0)

  ratedBy User @relation(fields: [userId], references: [id])
  userId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  course    Course?  @relation(fields: [courseId], references: [id])
  courseId  Int?
}

model Course {
  id       Int    @id @default(autoincrement())
  courseId String @unique

  title           String
  subtitle        String
  price           Float?
  discountAmount  Float?
  discountPercent Int?

  topic String?

  language         Language @default(ENGLISH)
  subtitleLanguage Language @default(ENGLISH)
  level            Level?   @default(BEGINNER)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  category   Category @relation("MainCategory", fields: [categoryId], references: [id])
  categoryId Int

  subCategory   Category @relation("SubCategory", fields: [subCategoryId], references: [id])
  subCategoryId Int

  description String?

  learnableContent Json?
  skills           Json?

  welcomeMessage        String?
  congratulationMessage String?

  instructors       User[]              @relation("Instructors")
  coursesOnStudents CoursesOnStudents[]
  ratings           Rating[]
  sections          Section[]
  // Images/Videos URL
  thumbnail         String?
  trailer           String?
  order             Order[]
  Wishlist          Wishlist[]
  Cart              Cart[]

  popularity  Int           @default(0)
  transaction Transaction[]
}

model Category {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  name        String   @unique
  description String?  @db.Text

  parentCategoryId Int?
  parentCategory   Category?  @relation("CategoryToCategory", fields: [parentCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  courseCategory   Category[] @relation("CategoryToCategory")
  mainCourses      Course[]   @relation("MainCategory")
  subCourses       Course[]   @relation("SubCategory")

  @@unique([name, parentCategoryId])
  @@map("courseCategories")
}

enum Language {
  ENGLISH
  NEPALI
}

enum Level {
  BEGINNER
  INTERMEDIATE
  PROFESSIONAL
}

model Duration {
  id   Int    @id @default(autoincrement())
  time String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Section {
  id   Int    @id @default(autoincrement())
  name String

  listOrder Int
  lectures  Lecture[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  Course    Course?   @relation(fields: [courseId], references: [id])
  courseId  Int?
}

model Lecture {
  id          Int      @id @default(autoincrement())
  name        String
  listOrder   Int
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  note   Note? @relation(fields: [noteId], references: [id])
  noteId Int?  @unique

  section        Section    @relation(fields: [sectionId], references: [id])
  sectionId      Int
  length         String?
  // url video
  video          String?
  lecturesViewed Progress[]
}

model Note {
  id Int @id @default(autoincrement())

  noteDescription String?

  // urls to note files
  noteFiles Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  lecture   Lecture?
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  total  Int      @default(0)
  course Course[]
  user   User?    @relation(fields: [userId], references: [id])
  userId Int?
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  course Course[]
  user   User?    @relation(fields: [userId], references: [id])
  userId Int?     @unique
}

model Cart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  course Course[]
  user   User?    @relation(fields: [userId], references: [id])
  userId Int?     @unique
}
